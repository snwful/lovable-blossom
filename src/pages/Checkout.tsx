import { useState } from "react";
import { useParams, Link } from "react-router-dom";
import { ArrowLeft, MapPin, CreditCard, Truck, Check } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";

const steps = [
  { id: "address", label: "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", icon: MapPin },
  { id: "shipping", label: "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á", icon: Truck },
  { id: "payment", label: "‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", icon: CreditCard },
  { id: "review", label: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", icon: Check },
];

const mockCartItems = [
  {
    id: "1",
    name: "iPhone 15 Pro Max 256GB ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô",
    price: 45900,
    quantity: 1,
    image: "https://images.unsplash.com/photo-1510557880182-3d4d3cba35a5?w=100&h=100&fit=crop",
  },
  {
    id: "2",
    name: "AirPods Pro (‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà 2)",
    price: 8900,
    quantity: 1,
    image: "https://images.unsplash.com/photo-1588423771073-b8903fbb85b5?w=100&h=100&fit=crop",
  }
];

export default function Checkout() {
  const { step } = useParams();
  const currentStep = step || "address";
  const currentStepIndex = steps.findIndex(s => s.id === currentStep);

  const subtotal = mockCartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  const shipping = 0; // Free shipping
  const total = subtotal + shipping;

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="sticky top-0 z-40 bg-background/95 backdrop-blur-sm border-b border-border">
        <div className="px-4 py-3">
          <div className="flex items-center gap-3 mb-4">
            <Link to="/cart">
              <Button variant="ghost" size="sm" className="p-2">
                <ArrowLeft className="w-5 h-5" />
              </Button>
            </Link>
            <h1 className="text-lg font-bold">‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h1>
          </div>

          {/* Progress Steps */}
          <div className="flex items-center justify-between">
            {steps.map((stepItem, index) => {
              const Icon = stepItem.icon;
              const isActive = index === currentStepIndex;
              const isCompleted = index < currentStepIndex;
              
              return (
                <div key={stepItem.id} className="flex items-center flex-1">
                  <div className="flex flex-col items-center">
                    <div
                      className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                        isCompleted
                          ? "bg-success text-success-foreground"
                          : isActive
                          ? "bg-primary text-primary-foreground"
                          : "bg-muted text-muted-foreground"
                      }`}
                    >
                      {isCompleted ? (
                        <Check className="w-4 h-4" />
                      ) : (
                        <Icon className="w-4 h-4" />
                      )}
                    </div>
                    <span className={`text-xs mt-1 ${isActive ? "font-medium" : ""}`}>
                      {stepItem.label}
                    </span>
                  </div>
                  {index < steps.length - 1 && (
                    <div
                      className={`flex-1 h-0.5 mx-2 ${
                        isCompleted ? "bg-success" : "bg-muted"
                      }`}
                    />
                  )}
                </div>
              );
            })}
          </div>
        </div>
      </header>

      <div className="px-4 py-4 pb-32 space-y-6">
        {/* Address Step */}
        {currentStep === "address" && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MapPin className="w-5 h-5" />
                ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="name">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</Label>
                <Input id="name" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" />
              </div>
              <div className="space-y-2">
                <Label htmlFor="phone">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</Label>
                <Input id="phone" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" type="tel" />
              </div>
              <div className="space-y-2">
                <Label htmlFor="address">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</Label>
                <Input id="address" placeholder="‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ‡∏ã‡∏≠‡∏¢ ‡∏ñ‡∏ô‡∏ô" />
              </div>
              <div className="grid grid-cols-2 gap-3">
                <div className="space-y-2">
                  <Label htmlFor="district">‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•</Label>
                  <Input id="district" placeholder="‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•" />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="subdistrict">‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠</Label>
                  <Input id="subdistrict" placeholder="‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠" />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-3">
                <div className="space-y-2">
                  <Label htmlFor="province">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</Label>
                  <Input id="province" placeholder="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î" />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="postal">‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå</Label>
                  <Input id="postal" placeholder="‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå" />
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Shipping Step */}
        {currentStep === "shipping" && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Truck className="w-5 h-5" />
                ‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {[
                { name: "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ", time: "3-5 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£", price: 0, recommended: true },
                { name: "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß", time: "1-2 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£", price: 50 },
                { name: "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô", time: "‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", price: 150 },
              ].map((option) => (
                <div
                  key={option.name}
                  className="flex items-center justify-between p-3 border-2 border-border rounded-lg hover:border-primary/30 cursor-pointer"
                >
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <h4 className="font-medium">{option.name}</h4>
                      {option.recommended && (
                        <Badge variant="secondary" className="text-xs">‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</Badge>
                      )}
                    </div>
                    <p className="text-sm text-muted-foreground">{option.time}</p>
                  </div>
                  <div className="text-right">
                    {option.price === 0 ? (
                      <span className="font-medium text-success">‡∏ü‡∏£‡∏µ</span>
                    ) : (
                      <span className="font-medium">‡∏ø{option.price}</span>
                    )}
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        )}

        {/* Payment Step */}
        {currentStep === "payment" && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <CreditCard className="w-5 h-5" />
                ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {[
                { name: "‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï", icon: "üí≥" },
                { name: "‡πÇ‡∏°‡∏ö‡∏≤‡∏¢‡πÅ‡∏ö‡∏á‡∏Å‡∏¥‡πâ‡∏á", icon: "üì±" },
                { name: "True Money Wallet", icon: "üí∞" },
                { name: "PromptPay", icon: "üè¶" },
              ].map((method) => (
                <div
                  key={method.name}
                  className="flex items-center gap-3 p-3 border-2 border-border rounded-lg hover:border-primary/30 cursor-pointer"
                >
                  <span className="text-2xl">{method.icon}</span>
                  <span className="font-medium">{method.name}</span>
                </div>
              ))}
            </CardContent>
          </Card>
        )}

        {/* Review Step */}
        {currentStep === "review" && (
          <div className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h4 className="font-medium mb-2">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h4>
                  <p className="text-sm text-muted-foreground">
                    ‡∏™‡∏∏‡∏Å‡∏±‡∏ç‡∏ç‡∏≤ ‡∏Å‡∏¥‡∏ï‡∏ï‡∏¥‡∏ä‡∏±‡∏¢<br />
                    ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: 081-234-5678<br />
                    123/456 ‡∏ñ.‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡πÅ‡∏Ç‡∏ß‡∏á‡∏Ñ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏ô<br />
                    ‡πÄ‡∏Ç‡∏ï‡∏ß‡∏±‡∏í‡∏ô‡∏≤ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110
                  </p>
                </div>
                
                <Separator />
                
                <div>
                  <h4 className="font-medium mb-2">‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h4>
                  <p className="text-sm text-muted-foreground">
                    ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ (3-5 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£)
                  </p>
                </div>
                
                <Separator />
                
                <div>
                  <h4 className="font-medium mb-2">‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h4>
                  <p className="text-sm text-muted-foreground">
                    ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Order Summary */}
        <Card>
          <CardHeader>
            <CardTitle>‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {mockCartItems.map((item) => (
              <div key={item.id} className="flex gap-3">
                <img
                  src={item.image}
                  alt={item.name}
                  className="w-16 h-16 object-cover rounded-lg"
                />
                <div className="flex-1">
                  <h4 className="font-medium text-sm line-clamp-2 mb-1">
                    {item.name}
                  </h4>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-muted-foreground">
                      ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {item.quantity}
                    </span>
                    <span className="font-medium">
                      ‡∏ø{(item.price * item.quantity).toLocaleString()}
                    </span>
                  </div>
                </div>
              </div>
            ))}
            
            <Separator />
            
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</span>
                <span>‡∏ø{subtotal.toLocaleString()}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á</span>
                <span className="text-success">‡∏ü‡∏£‡∏µ</span>
              </div>
              <Separator />
              <div className="flex justify-between font-bold text-lg">
                <span>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô</span>
                <span className="text-primary">‡∏ø{total.toLocaleString()}</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Bottom Actions */}
      <div className="fixed bottom-0 left-0 right-0 bg-background border-t border-border p-4 z-40">
        <div className="flex gap-3">
          {currentStepIndex > 0 && (
            <Link to={`/checkout/${steps[currentStepIndex - 1].id}`}>
              <Button variant="outline" className="flex-1">
                ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
              </Button>
            </Link>
          )}
          
          {currentStep === "review" ? (
            <Button className="flex-1 h-12 text-lg font-semibold">
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
            </Button>
          ) : (
            <Link to={`/checkout/${steps[currentStepIndex + 1].id}`}>
              <Button className="flex-1 h-12 text-lg font-semibold">
                ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
              </Button>
            </Link>
          )}
        </div>
      </div>
    </div>
  );
}